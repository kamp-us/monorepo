// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Upvote {
  id String @id @default(cuid())

  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userID String
  owner  User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([postID, userID])
  @@index([postID])
  @@index([userID])
}

model CommentUpvote {
  id String @id @default(cuid())

  commentID String
  comment   Comment @relation(fields: [commentID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userID String
  owner  User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([commentID])
  @@index([userID])
}

model Comment {
  id      String @id @default(cuid())
  content String

  userID String
  owner  User   @relation(fields: [userID], references: [id])

  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade)

  parentID String?
  parent   Comment?        @relation("CommentComments", fields: [parentID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments Comment[]       @relation("CommentComments")
  upvotes  CommentUpvote[]

  notifications Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userID])
  @@index([postID])
  @@index([parentID])
}

model Post {
  id      String  @id @default(cuid())
  title   String
  url     String?
  site    String?
  content String?

  userID String
  owner  User   @relation(fields: [userID], references: [id])

  comments Comment[]
  upvotes  Upvote[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  notifications Notification[]

  @@index([site])
  @@index([userID])
}

model User {
  id            String    @id @default(cuid())
  name          String? // Check if needed
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?

  image String?

  accounts Account[]
  sessions Session[]

  posts          Post[]
  comments       Comment[]
  commentUpvotes CommentUpvote[]
  upvotes        Upvote[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  preference    UserPreference?
  notifications Notification[]  @relation("Notification")
  notifies      Notification[]  @relation("Notifies")
}

enum Theme {
  LIGHT
  DARK
}

model UserPreference {
  theme Theme @default(DARK)

  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model Notification {
  id                String           @id @default(cuid())
  notifies          User             @relation(name: "Notification", fields: [notifiesUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notifiesUserID    String
  triggeredBy       User             @relation(name: "Notifies", fields: [triggeredByUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  triggeredByUserID String
  createdAt         DateTime         @default(now())
  type              NotificationType
  post              Post?            @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postID            String?
  comment           Comment?         @relation(fields: [commentID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentID         String?
  read              Boolean          @default(false)
  url               String

  @@index([commentID])
  @@index([notifiesUserID])
  @@index([triggeredByUserID])
  @@index([postID])
}

enum NotificationType {
  UPVOTECOMMENT
  UPVOTEPOST
  COMMENT
  REPLY
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
