type Query {
  user(input: UserInput!): User

  sozluk: SozlukQuery!

  pano: PanoQuery!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type User {
  id: ID!
  username: String!
}

input UserInput {
  id: ID
  username: String
}

type SozlukQuery {
  term(input: SozlukTermInput!): SozlukTerm
  terms(after: String, before: String, first: Int, last: Int): SozlukTermConnection
}

input SozlukTermInput {
  id: ID!
}

type SozlukTerm {
  id: ID!
  title: String!
  tags: [String!]
  body: SozlukTermBody!
}

type SozlukTermBody {
  raw: String!
  code: String!
  html: String!
}

type SozlukTermConnection {
  edges: [SozlukTermEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type SozlukTermEdge {
  cursor: String!
  node: SozlukTerm
}

type PanoQuery {
  post(input: PanoPostInput!): PanoPost
  posts(after: String, before: String, first: Int, last: Int): PanoPostsConnection
}

input PanoPostInput {
  slug: String!
  id: ID!
}

type PanoPost {
  id: ID!
  title: String!
  url: String!
  content: String
  slug: String!
  userID: String!
}

type PanoPostsConnection {
  edges: [PanoPostsEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PanoPostsEdge {
  cursor: String!
  node: PanoPost
}