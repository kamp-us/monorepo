scalar Date
scalar DateTime

interface Node {
  id: ID!
}

interface Actor {
  id: ID!
  displayName: String
}

interface UserError {
  message: String!
}

interface Upvotable {
  id: ID!
  upvoteCount: Int
  isUpvotedByViewer: Boolean!
}

type Query {
  # we need to have a way to encode the typename into id
  # so that `Query.node` can decode it and figure out what to resolve
  node(id: ID!): Node

  viewer: Viewer

  user(id: ID, username: String): User
  sozluk: SozlukQuery!
  pano: PanoQuery!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type NotAuthorized implements UserError {
  message: String!
}

type InvalidInput implements UserError {
  message: String!
}

type Viewer {
  actor: Actor
  panoFeed(
    after: String
    before: String
    first: Int
    last: Int
    filter: PanoPostFilter
  ): PanoPostConnection
  panoFeedBySite(site: String!, after: String, first: Int): PanoPostConnection
}

type User implements Node & Actor {
  id: ID!
  username: String!
  displayName: String

  panoPosts(
    after: String
    before: String
    first: Int
    last: Int
    filter: PanoPostFilter
  ): PanoPostConnection
}

type SozlukQuery {
  term(id: ID!): SozlukTerm
  terms(after: String, before: String, first: Int, last: Int): SozlukTermConnection
}

type SozlukTerm implements Node {
  id: ID!
  title: String!
  tags: [String!]!
  body: SozlukTermBody!
}

type SozlukTermBody {
  raw: String!
  code: String!
  html: String!
}

type SozlukTermConnection {
  edges: [SozlukTermEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type SozlukTermEdge {
  cursor: String!
  node: SozlukTerm
}

### PANO
type PanoQuery {
  post(id: ID!): PanoPost
  posts(ids: [ID!]!): [PanoPost]!
  postsBySite(site: String!, after: String, first: Int): PanoPostConnection
}

enum PanoPostFilter {
  ALL
  HOT
  LIKED
  ACTIVE
  SELF
}

type PanoPost implements Node & Upvotable {
  id: ID!
  title: String!
  url: String
  site: String
  content: String
  createdAt: DateTime!
  owner: User
  comments(after: String, before: String, first: Int, last: Int): PanoCommentConnection
  commentCount: Int
  upvoteCount: Int
  isUpvotedByViewer: Boolean!
}

type PanoPostConnection {
  nodes: [PanoPost]
  edges: [PanoPostEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PanoPostEdge {
  cursor: String!
  node: PanoPost
}

type PanoComment implements Node & Upvotable {
  id: ID!
  content: String!
  owner: User
  post: PanoPost
  parent: PanoComment
  comments(after: String, before: String, first: Int, last: Int): PanoCommentConnection
  commentCount: Int
  upvoteCount: Int
  isUpvotedByViewer: Boolean!
  createdAt: DateTime!
}

type PanoCommentConnection {
  nodes: [PanoComment]
  edges: [PanoCommentEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PanoCommentEdge {
  cursor: String!
  node: PanoComment
}

type Mutation {
  createPanoPost(input: CreatePanoPostInput!): CreatePanoPostPayload
  updatePanoPost(input: UpdatePanoPostInput!): UpdatePanoPostPayload
  removePanoPost(input: RemovePanoPostInput!): RemovePanoPostPayload

  createPanoComment(input: CreatePanoCommentInput!): CreatePanoCommentPayload
  updatePanoComment(input: UpdatePanoCommentInput!): UpdatePanoCommentPayload
  removePanoComment(input: RemovePanoCommentInput!): RemovePanoCommentPayload

  createPanoUpvote(input: CreatePanoUpvoteInput!): CreatePanoUpvotePayload
  removePanoUpvote(input: RemovePanoUpvoteInput!): RemovePanoUpvotePayload
}

# Pano post mutations

union PanoPostError = NotAuthorized | InvalidInput

input CreatePanoPostInput {
  title: String!
  content: String
  url: String
}

type CreatePanoPostPayload {
  edge: PanoPostEdge
  error: PanoPostError
}

input UpdatePanoPostInput {
  id: ID!
  title: String!
  content: String
  url: String
}

type UpdatePanoPostPayload {
  edge: PanoPostEdge
  error: PanoPostError
}

input RemovePanoPostInput {
  id: ID!
}

type RemovePanoPostPayload {
  edge: PanoPostEdge
  error: PanoPostError
}

# Pano comment mutations

union PanoCommentError = NotAuthorized | InvalidInput

input CreatePanoCommentInput {
  content: String!
  postID: String!
  parentID: String
}

type CreatePanoCommentPayload {
  edge: PanoCommentEdge
  error: PanoCommentError
}

input UpdatePanoCommentInput {
  id: ID!
  content: String!
}

type UpdatePanoCommentPayload {
  edge: PanoCommentEdge
  error: PanoCommentError
}

input RemovePanoCommentInput {
  id: ID!
}

type RemovePanoCommentPayload {
  edge: PanoCommentEdge
  error: PanoCommentError
}

# Pano post upvote mutations

union PanoUpvoteError = NotAuthorized | InvalidInput

type PanoUpvote {
  id: ID!
  node: Upvotable
  owner: User
}

input CreatePanoUpvoteInput {
  id: ID!
}

type CreatePanoUpvotePayload {
  node: PanoUpvote
  error: PanoUpvoteError
}

input RemovePanoUpvoteInput {
  id: ID!
}

type RemovePanoUpvotePayload {
  node: PanoUpvote
  error: PanoUpvoteError
}
