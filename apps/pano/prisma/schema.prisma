// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Upvote {
  id String @id @default(cuid())

  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userID String
  owner  User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CommentUpvote {
  id String @id @default(cuid())

  commentID String
  comment   Comment @relation(fields: [commentID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userID String
  owner  User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Comment {
  id      String @id @default(cuid())
  content String

  userID String
  owner  User   @relation(fields: [userID], references: [id])

  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade)

  parentID String?
  parent   Comment?        @relation("CommentComments", fields: [parentID], references: [id])
  comments Comment[]       @relation("CommentComments")
  upvotes  CommentUpvote[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Post {
  id      String  @id @default(cuid())
  title   String
  url     String?
  site    String?
  slug    String
  content String?

  userID String
  owner  User   @relation(fields: [userID], references: [id])

  comments Comment[]
  upvotes  Upvote[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([site])
}

model Password {
  hash String

  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique

  password Password?

  posts          Post[]
  comments       Comment[]
  commentUpvotes CommentUpvote[]
  upvotes        Upvote[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  preference UserPreference?
}

enum Theme {
  LIGHT
  DARK
}

model UserPreference {
  theme Theme @default(DARK)
  
  user  User @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}
